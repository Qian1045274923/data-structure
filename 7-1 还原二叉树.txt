**7-1 还原二叉树**
给定一棵二叉树的先序遍历序列和中序遍历序列，要求计算该二叉树的高度。

输入格式:
输入首先给出正整数N（≤50），为树中结点总数。下面两行先后给出先序和中序遍历序列，均是长度为N的不包含重复英文字母（区别大小写）的字符串。

输出格式:
输出为一个整数，即该二叉树的高度。

**输入样例:**
9
ABDFGHIEC
FDHGIBEAC
结尾无空行
**输出样例:**
5
结尾无空行

C++

```cpp
using namespace std;
#include <algorithm>
#include<cstring>
#include <iostream>
#include<string>
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<string.h>
#include<iomanip>
#include<sstream>
#include<vector>;
#include <map>


struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) {}
};


class Solution {
public:
    map<int, int>m;
    int buildTree(vector<int>& preorder, vector<int>& inorder) {
        if (!preorder.size())return NULL;
        for (int i = 0; i < inorder.size(); ++i) {
            m[inorder[i]] = i;
        }
        TreeNode* root = building(preorder, inorder, 0, preorder.size() - 1, 0, inorder.size() - 1);
        return deep(root);
    }
private:
    TreeNode* building(const vector<int>& preorder, const vector<int>& inorder, int pre_l, int pre_r, int ior_l, int ior_r)
    {
        if (pre_l > pre_r)return NULL;

        int pre_root = pre_l;//根节点在前序遍历数组中的下标
        int ior_root = m[preorder[pre_root]];//根节点在中序遍历数组中的下标
        int L_size = ior_root - ior_l;//根节点左子树的大小

        TreeNode* root = new TreeNode(preorder[pre_root]);//创建根节点

        root->left = building(preorder, inorder, pre_l + 1, pre_l + L_size, ior_l, ior_root - 1);
        root->right = building(preorder, inorder, pre_l + L_size + 1, pre_r, ior_root + 1, ior_r);

        return root;
    }
    int deep(TreeNode* root)
    {
        if (!root)return 0;
        return max(deep(root->left), deep(root->right)) + 1;
    }
};

int main()
{
    int n; char t; cin >> n;
    vector<int>preorder; vector<int>inorder;
    for (int i = 0; i < n; i++)
    {
        cin >> t; preorder.push_back(t);
    }
    for (int i = 0; i < n; i++)
    {
        cin >> t; inorder.push_back(t);
    }
    Solution S;
    cout << S.buildTree(preorder, inorder);
    return 0;
}
```
