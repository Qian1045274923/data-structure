
7-1 一元多项式的乘法与加法运算 (20 分)
设计函数分别求两个一元多项式的乘积与和。

输入格式:
输入分2行，每行分别先给出多项式非零项的个数，再以指数递降方式输入一个多项式非零项系数和指数（绝对值均为不超过1000的整数）。数字间以空格分隔。

输出格式:
输出分2行，分别以指数递降方式输出乘积多项式以及和多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。零多项式应输出0 0。

输入样例:
4 3 4 -5 2  6 1  -2 0
3 5 20  -7 4  3 1
结尾无空行
输出样例:
15 24 -25 22 30 21 -10 20 -21 8 35 6 -33 5 14 4 -15 3 18 2 -6 1
5 20 -4 4 -5 2 9 1 -2 0
结尾无空行

C（gcc）

#include<stdio.h>

#define N 10000
/*评测结果
2016-03-06 15:59     
测试点 结果  得分/满分 用时（ms）    内存（MB）要点提示
测试点1    答案正确  12/12   2  1   sample换个数字   
测试点2 答案正确   4/4    2  1   同类项合并时有抵消   
测试点3 答案正确   2/2    1  1   系数和指数取上限，结果有零多项式   
测试点4 答案正确   2/2    2  1   输入有零多项式和常数多项式   
*/
int main() {
    int a[N]= {0};//第一个单项式
    int b[N]= {0};//第二个单项式
    int c[N]= {0};//求积
    int d[N]= {0};//求和
    int i,m,f;
    scanf("%d",&i);
    while(i--) {
        scanf("%d %d",&m,&f);
        a[f]+=m;
    }
    scanf("%d",&i);
    while(i--) {
        scanf("%d %d",&m,&f);
        b[f]+=m;
    }
    for(int i=N-1; i>=0; i--) {
        if(a[i]) {
            for(int j=0; j<N; j++) {
                if(b[j]) {
                    c[i+j]+=a[i]*b[j];
                }
            }
        }
    }
    int cnt=0;
    for(int i=N-1; i>=0; i--) {

        if(c[i]) {
            if(cnt)printf(" ");
            printf("%d %d",c[i],i);
            cnt++;
        }

    }
    if(!cnt)printf("0 0");

    for(int i=N-1; i>=0; i--)
        if(a[i])
            d[i]+=a[i];
    for(int j=0; j<N; j++)
        if(b[j])
            d[j]+=b[j];

printf("\n");

     cnt=0;
    for(int i=N-1; i>=0; i--) {

        if(d[i]) {
            if(cnt)printf(" ");
            printf("%d %d",d[i],i);
            cnt++;
        }

    }
    if(!cnt)printf("0 0");
    return 0;
}
