7-2 树的遍历
给定一棵二叉树的后序遍历和中序遍历，请你输出其层序遍历的序列。这里假设键值都是互不相等的正整数。

输入格式：
输入第一行给出一个正整数N（≤30），是二叉树中结点的个数。第二行给出其后序遍历序列。第三行给出其中序遍历序列。数字间以空格分隔。

输出格式：
在一行中输出该树的层序遍历的序列。数字间以1个空格分隔，行首尾不得有多余空格。

输入样例：
7
2 3 1 5 7 6 4
1 2 3 4 5 6 7
结尾无空行
输出样例：
4 1 6 3 5 7 2
结尾无空行

C++

using namespace std;
#include <algorithm>
#include<cstring>
#include <iostream>
#include<string>
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<string.h>
#include<iomanip>
#include<sstream>
#include<vector>;
#include<deque>
#include <set>
#include <unordered_set>
#include <map>
#include<stack>
#include<queue>
#include<list>


struct TreeNode {
	int val;
	TreeNode* left;
	TreeNode* right;
	TreeNode() : val(0), left(nullptr), right(nullptr) {}
	TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
	TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) {}
};

map<int, int>m;
TreeNode* building(const vector<int>& ior, const vector<int>& fin, int ior_l, int ior_r, int fin_l, int fin_r)
{
	if (fin_l > fin_r)return NULL;
	int fin_root = fin_r;//根节点在后序遍历数组中的下标
	int ior_root = m[fin[fin_root]];//根节点在中序遍历数组中的下标
	int L_size = ior_root - ior_l;//根节点左子树的大小
	TreeNode* root = new TreeNode(fin[fin_root]);//创建根节点
	root->left = building(ior, fin, ior_l, ior_root - 1, fin_l, fin_l + L_size - 1);
	root->right = building(ior, fin, ior_root + 1, ior_r, fin_l + L_size, fin_root - 1);
	return root;
}
vector<int>T;
void travel(TreeNode* root)
{
	queue< TreeNode* >q;
	q.push(root);
	while (!q.empty())
	{
		T.push_back(q.front()->val);
		if(q.front()->left)q.push(q.front()->left); 
		if(q.front()->right)q.push(q.front()->right);
		q.pop();
	}
}
int main()
{
	int n, t, i; cin >> n;
	vector<int>ior; vector<int>fin;
	for (i = 0; i < n; i++)
	{
		cin >> t;//输入后序遍历数组
		fin.push_back(t);
	}
	for (i = 0; i < n; i++)
	{
		cin >> t;
		ior.push_back(t);//输入中序遍历数组
	}
	for (int i = 0; i < ior.size(); ++i) m[ior[i]] = i;
	TreeNode* root = building(ior, fin, 0, ior.size() - 1, 0, fin.size() - 1);//构建二叉树
	travel(root);//bfs
	for (int i = 0; i < T.size(); i++)
	{
		if (i + 1 < T.size())cout << T[i] << " ";
		else cout << T[i] << endl;
	}
}
